<style>
  h1 {
    color: black;
    font-size: 30px;
  }

  h2 {
    font-weight: bold;
    font-size: 25px
  }

  p {
    font-size: 15px;
  }

  img {
    border-radius: 15px;
    max-width: 100%;
  }

  ::selection {
    color: white;
    background: #568C03;
  }

  .centralizar {
    text-align: center;
  }

  .fundo-bege {
    background-color: #f8efe5;
    min-height: 1000px;
  }

  .coluna-padding-top {
    padding-top: 110px;
  }

  .padding-bottom-texto {
    padding-bottom: 40px;
  }

  .padding-top-botao {
    padding-top: 25px;
  }

  .img-fundo-coluna {
    background-image: url(/public/img/3_teste_cadastro.png);
    background-size: auto 100%;
    background-repeat: no-repeat;
    margin-top: 35px;
  }

  .padding-top-logo {
    padding-top: 80px;
  }

  .link-verde {
    text-decoration: none;
    color: #568C03;
  }
  
</style>
<div class="fundo-bege">
  <div class="container-fluid">
    <div class="row">
      <div class="col-md-10 offset-md-1 coluna-padding-top">
        <h1 class="centralizar">
          Junte-se a nós
        </h1>
        <div class="centralizar pt-3">
          <img src="/public/img/logo_oficial.svg" alt="Logo FarmerLink" width="150px">
        </div>
        <div class="mb-2 pt-3">
          <label for="inputNomeCompleto" class="form-label"
            >Nome completo</label
          >
          <input
            type="text"
            id="inputNomeCompleto"
            class="form-control"
            maxlength="50"
          />
        </div>
        <div class="mt-3">
          <label for="inputEmail" class="form-label">E-mail</label>
          <input
            type="text"
            id="inputEmail"
            class="form-control"
            maxlength="50"
          />
        </div>
        <div class="mt-3">
          <label for="inputTelefone" class="form-label">Telefone</label>
          <input
            type="tel"
            id="inputTelefone"
            class="form-control"
          />
        </div>
        <div class="mt-3">
          <label for="inputCPF" class="form-label">CPF</label>
          <input
            type="text"
            id="inputCPF"
            class="form-control"
          />
        </div>
        <div class="mt-3">
          <label for="inputDataDeNascimento" class="form-label"
            >Data de nascimento</label
          >
          <input
            type="date"
            id="inputDataDeNascimento"
            class="form-control"
          />
        </div>
        <div class="mt-3">
          <label for="inputCEP" class="form-label">CEP</label>
          <input
            type="text"
            id="inputCEP"
            class="form-control"
          />
        </div>
        <div class="mt-3">
          <label for="selectOpcoes" class="form-label">Tipo da conta</label>
          <select id="selectOpcoes" class="form-select" onchange="atualizarUIFazendeiro()">
            <option value="">Selecione...</option>
            <option value="a">Cliente</option>
            <option value="b">Fazendeiro</option>
          </select>
        </div>

        <div id="divFazendeiro" class="d-none">
          <div class="mt-3">
            <label class="form-label" for="inputResumo">Resumo</label>
            <input
              type="text"
              id="inputResumo"
              class="form-control"
              maxlength="150"
            />
          </div>
          <div class="mt-3">
            <label class="form-label" for="inputCatalogo">Catálogo</label>
            <div id="inputCatalogo"></div>
          </div>
        </div>
      
        <div class="d-grid padding-top-botao">
          <button
            type="button"
            onclick="efetuarCadastro()"
            class="btn btn-primary buttonzinho"
          >
            Cadastrar
          </button>
        </div>
        <p class="centralizar padding-top-botao padding-bottom-texto">
          Já tem uma conta?
          <a href="/entrar" class="link-verde">Entrar</a>
        </p>
      </div>
    </div>
  </div>
</div>


<div class="container-fluid">
  <div class="row">
    <div class="col-md-3 offset-md-1 centralizar pt-3">
      <p>
        <img
          src="/public/img/entrega_rapida.png"
          width="50px"
          alt="Ícone de caixa"
        />
        Entrega rápida
      </p>
    </div>
    <div class="col-md-4 centralizar pt-3">
      <p>
        <img
          src="/public/img/qualidade_garantida.png"
          width="50px"
          alt="Ícone sinal positivo"
        />
        Qualidade garantida
      </p>
    </div>
    <div class="col-md-3 centralizar pt-3">
      <p>
        <img
          src="/public/img/eco_friendly.png"
          width="50px"
          alt="Ícone folha"
        />
        Eco friendly
      </p>
    </div>
  </div>
</div>

<script type="text/javascript" src="/public/js/ckeditor/ckeditor.js"></script>

<script>

  CKEDITOR.replace("inputCatalogo");

  const SPMaskBehavior = function (val) {
    return val.replace(/\D/g, '').length === 11 ? '(00) 00000-0000' : '(00) 0000-00009';
  },
  spOptions = {
    onKeyPress: function(val, e, field, options) {
      field.mask(SPMaskBehavior.apply({}, arguments), options);
    }
  };
  $("#inputTelefone").mask(SPMaskBehavior, spOptions);
  $("#inputCPF").mask("000.000.000-00", {reverse: true});
  $("#inputCEP").mask("00000-000");

  async function efetuarCadastro() {
    let inputNomeCompleto = document.getElementById("inputNomeCompleto");
    let inputEmail = document.getElementById("inputEmail");
    let inputTelefone = document.getElementById("inputTelefone");
    let inputCPF = document.getElementById("inputCPF");
    let inputDataDeNascimento = document.getElementById("inputDataDeNascimento");
    let inputCEP = document.getElementById("inputCEP");
    let inputResumo = document.getElementById('inputResumo');
    let selectOpcoes = document.getElementById("selectOpcoes");

    let nomeCompleto = inputNomeCompleto.value.normalize().trim();
    let email = inputEmail.value.normalize().trim();
    let telefone = inputTelefone.value.normalize().trim();
    let cpf = inputCPF.value.normalize().trim();
    let dataDeNascimento = inputDataDeNascimento.value;
    let cep = inputCEP.value.normalize().trim();
    let resumo = inputResumo.value.normalize().trim();
    let catalogo = CKEDITOR.instances.inputCatalogo.getData().normalize().trim();
    let opcao = selectOpcoes.value;

    if (!nomeCompleto) {
      console.log("Nome completo vazio!");
      Swal.fire({
        title: "Atenção!",
        text: "Nome completo vazio.",
        icon: "warning",
        confirmButtonColor: "#568C03"
      });
      return;
    } else {
      console.log("Nome completo : " + nomeCompleto);
    };

    if (!email) {
      console.log("E-mail vazio!");
      Swal.fire({
        title: "Atenção!",
        text: "E-mail vazio.",
        icon: "warning",
        confirmButtonColor: "#568C03"
      });
      return;
    } else {
      console.log("E-mail: " + email);
    };

    if (!telefone) {
      console.log("Telefone vazio!");
      Swal.fire({
        title: "Atenção!",
        text: "Telefone vazio.",
        icon: "warning",
        confirmButtonColor: "#568C03"
      });
      return;
    } else {
      console.log("Telefone: " + telefone);
    };

    if (!cpf) {
      console.log("CPF vazio!");
      Swal.fire({
        title: "Atenção!",
        text: "CPF vazio.",
        icon: "warning",
        confirmButtonColor: "#568C03"
      });
      return;
    } else {
      console.log("Telefone: " + telefone);
    };

    if (!dataDeNascimento) {
      console.log("Data de nascimento vazia!");
      Swal.fire({
        title: "Atenção!",
        text: "Data de nascimento vazia.",
        icon: "warning",
        confirmButtonColor: "#568C03"
      });
      return;
    } else {
      console.log("Data de nascimento: " + dataDeNascimento);
    };

    if (!cep) {
      console.log("CEP vazio!");
      Swal.fire({
        title: "Atenção!",
        text: "CEP vazio.",
        icon: "warning",
        confirmButtonColor: "#568C03"
      });
      return;
    } else {
      console.log("CEP: " + cep);
    };

    if (!opcao) {
      console.log("Opção inválida!");
      Swal.fire({
        title: "Atenção!",
        text: "Opção inválida.",
        icon: "warning",
        confirmButtonColor: "#568C03"
      });
      return;
    };

    if (opcao == "a") {
      let cliente = {
        nome: nomeCompleto,
        email: email,
        telefone: telefone,
        cpf: cpf,
        nascimento: dataDeNascimento,
        cep: cep
      };

      try {
        let response = await fetch("/criarUsuario", {
          method: "POST",
          body: JSON.stringify(cliente),
          headers: {
            "content-type": "application/json"
          }
        });

        if (!response.ok) {
					console.log("Ocorreu um erro ao criar o cliente.");
          Swal.fire({
            title: "Oops...",
            text: "Ocorreu um erro ao criar o cliente",
            icon: "error",
            confirmButtonColor: "#568C03"
          });
					return;
        }

        inputNomeCompleto.value = "";
				inputEmail.value = "";
				inputTelefone.value = "";
				inputCPF.value = "";
        inputCEP.value = "";
        inputDataDeNascimento.value = "";
        selectOpcoes.value = "";

        Swal.fire({
          title: "Parabéns!",
          text: "Cliente FarmerLink criado com sucesso!",
          icon: "success",
          confirmButtonColor: "#568C03"
        });
        console.log("Cliente FarmerLink criado com sucesso!");

      } catch (ex) {
        Swal.fire({
          title: "Oops...",
          text: "Ocorreu um erro de rede ao criar o cliente: " + ex.message,
          icon: "error",
          confirmButtonColor: "#568C03"
        });
        console.log("Ocorreu um erro de rede ao criar o cliente: " + ex.message);
      }

    } else {

      if (!resumo) {
      console.log("Resumo inválido!");
      Swal.fire({
        title: "Atenção!",
        text: "Resumo inválido.",
        icon: "warning",
        confirmButtonColor: "#568C03"
      });
      return;
      } else {
      console.log("Resumo: " + resumo);
      };

      if (!catalogo) {
      console.log("Catálogo inválido!");
      Swal.fire({
        title: "Atenção!",
        text: "Catálogo inválido.",
        icon: "warning",
        confirmButtonColor: "#568C03"
      });
      return;
      } else {
      console.log("Catálogo: " + catalogo);
      };

      let fazendeiro = {
        nome: nomeCompleto,
        email: email,
        telefone: telefone,
        cpf: cpf,
        nascimento: dataDeNascimento,
        cep: cep,
        resumo: resumo,
        catalogo: catalogo
      };

      try {
        let response = await fetch("/criarFazendeiro", {
          method: "POST",
          body: JSON.stringify(fazendeiro),
          headers: {
            "content-type": "application/json"
          }
        });

        if (!response.ok) {
					console.log("Ocorreu um erro ao criar o(a) fazendeiro(a).");
          Swal.fire({
            title: "Oops...",
            text: "Ocorreu um erro de rede ao criar o(a) fazendeiro(a): ",
            icon: "error",
            confirmButtonColor: "#568C03"
          });
					return;
        }

        inputNomeCompleto.value = "";
				inputEmail.value = "";
				inputTelefone.value = "";
				inputCPF.value = "";
        inputCEP.value = '';
        inputDataDeNascimento.value = "";
        selectOpcoes.value = "";
        inputResumo.value = "";
        CKEDITOR.instances.inputCatalogo.setData("");

        document.getElementById("divFazendeiro").className = "d-none";

        Swal.fire({
          title: "Parabéns!",
          text: "Fazendeiro(a) FarmerLink criado com sucesso!",
          icon: "success",
          confirmButtonColor: "#568C03"
        });
        console.log("Fazendeiro(a) FarmerLink criado com sucesso!");

      } catch (ex) {
        Swal.fire({
          title: "Oops...",
          text: "Ocorreu um erro de rede ao criar o(a) fazendeiro(a): " + ex.message,
          icon: "error",
          confirmButtonColor: "#568C03"
        });
        console.log("Ocorreu um erro de rede ao criar o(a) fazendeiro(a): " + ex.message);
      }
    }
  }

  function atualizarUIFazendeiro() {
    let selectOpcoes = document.getElementById("selectOpcoes");
    let divFazendeiro = document.getElementById("divFazendeiro");
    
    let opcao = selectOpcoes.value;

    if (opcao == "b") {
      divFazendeiro.className = "";
    } else {
      divFazendeiro.className = "d-none";
    }

  }
  /*
  const mascaraInputCPF = document.querySelector("#inputCPF");
  mascaraInputCPF.addEventListener("keypress", () => {
    let inputLengthCPF = mascaraInputCPF.value.length;

    if (inputLengthCPF === 3 || inputLengthCPF === 7) {
      mascaraInputCPF.value += ".";
    }
    if (inputLengthCPF === 11) {
      mascaraInputCPF.value += "-";
    }
  });

  const mascaraInputTelefone = document.querySelector("#inputTelefone");
  mascaraInputTelefone.addEventListener("keypress", () => {
    let inputLengthTelefone = mascaraInputTelefone.value.length;

    if (inputLengthTelefone === 0) {
      mascaraInputTelefone.value += "(";
    }
    if (inputLengthTelefone === 3) {
      mascaraInputTelefone.value += ")";
    }
    if (inputLengthTelefone === 4) {
      mascaraInputTelefone.value += " ";
    }
    if (inputLengthTelefone === 9) {
      mascaraInputTelefone.value += "-";
    }
  });

  const mascaraInputCEP = document.querySelector("#inputCEP");
  mascaraInputCEP.addEventListener("keypress", () => {
    let inputLengthCEP = mascaraInputCEP.value.length;

    if (inputLengthCEP === 5) {
      mascaraInputCEP.value += "-";
    }
  });
  */
</script>
